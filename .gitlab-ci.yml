image: dkr.rlab.io/system/thedocker:latest

stages:
 - pre_build
 - pre_build_checks
 - checks
 - prepare
 - test
 - post-test
 - publish
 - cleanup

pre_build:daemon:
  stage: pre_build
  tags:
   - docker
  script:
   - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
   - docker pull $CI_REGISTRY_IMAGE:latest || true
   - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME || true
   - docker build --cache-from $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME,$CI_REGISTRY_IMAGE:latest -t $CI_REGISTRY_IMAGE:ci-${CI_PIPELINE_ID} -t $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME .
   - docker push $CI_REGISTRY_IMAGE:ci-${CI_PIPELINE_ID}
   - docker push $CI_REGISTRY_IMAGE:${CI_COMMIT_REF_NAME}

pre_build:checker:
  stage: pre_build_checks
  tags:
   - docker
  script:
   - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
   - docker pull $CI_REGISTRY_IMAGE/checks:latest || true
   - sed -i "s#dkr\.beiran\.io\/beiran\/beiran:dev#${CI_REGISTRY_IMAGE}:ci-${CI_PIPELINE_ID}#g" helpers/docker/checks/Dockerfile
   - docker build --cache-from $CI_REGISTRY_IMAGE/checks:latest -t $CI_REGISTRY_IMAGE/checks:ci-${CI_PIPELINE_ID} -t $CI_REGISTRY_IMAGE/checks:latest -f helpers/docker/checks/Dockerfile .
   - docker push $CI_REGISTRY_IMAGE/checks:ci-${CI_PIPELINE_ID}
   - docker push $CI_REGISTRY_IMAGE/checks:latest

package:docs:
  stage: prepare
  tags:
  - docker
  image:
    name: $CI_REGISTRY_IMAGE:ci-${CI_PIPELINE_ID}
    # reset entrypoint
    entrypoint: [""]
  script:
  - cd doc/
  - pip3 install -r requirements.txt
  - make html
  cache:
    key: doc-build-cache
    policy: push
    paths:
    - doc/

publish:dev-docs:
  stage: publish
  tags:
  - docker
  script:
  - cd doc/build/html
  - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
  - echo -e "FROM nginx:latest\nADD . /usr/share/nginx/html/\n" > Dockerfile
  - docker build -t ${CI_REGISTRY_IMAGE}/docs:${CI_COMMIT_REF_SLUG} -t ${CI_REGISTRY_IMAGE}/docs:dev .
  # temporarily pushing all docs for now
  - docker push ${CI_REGISTRY_IMAGE}/docs:${CI_COMMIT_REF_SLUG}
  # TODO: Only if latest dev version?
  - docker push ${CI_REGISTRY_IMAGE}/docs:dev
  - curl --insecure https://gitlab.beiran.io:16434
  cache:
    key: doc-build-cache
    policy: pull
    paths:
    - doc/
  only:
    - /^dev-.*/

publish:docs:
  stage: publish
  tags:
  - docker
  script:
  - cd doc/build/html
  - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
  - echo -e "FROM nginx:latest\nADD . /usr/share/nginx/html/\n" > Dockerfile
  - docker build -t $CI_REGISTRY_IMAGE/docs:${CI_COMMIT_TAG} .
  # temporarily pushing all docs for now
  - docker push $CI_REGISTRY_IMAGE/docs:${CI_COMMIT_TAG}
  - curl --insecure https://gitlab.beiran.io:16434
  cache:
    key: doc-build-cache
    policy: pull
    paths:
    - doc/
  only:
    - tags

publish:oci-image-layout:
  stage: publish
  tags:
  - docker
  script:
    - apk update
    - apk add go=1.9.4-r0
    - apk add musl-dev
    - go get github.com/coolljt0725/docker2oci
    - docker save $CI_REGISTRY_IMAGE:ci-${CI_PIPELINE_ID} | $HOME/go/bin/docker2oci image-layout-${CI_COMMIT_TAG}
    # upload image_layer to minio
    - tar czf image-layout-${CI_COMMIT_TAG}.tar.gz image-layout-${CI_COMMIT_TAG}
    - go get github.com/minio/mc
    - $HOME/go/bin/mc config host add beiran https://minio.beiran.io $MINIO_ACCESS_KEY $MINIO_SECRET_KEY
    - $HOME/go/bin/mc cp image-layout-${CI_COMMIT_TAG}.tar.gz beiran/releases
  only:
    - tags

checks:lint-beiran:
  stage: checks
  image: $CI_REGISTRY_IMAGE/checks:ci-${CI_PIPELINE_ID}
  tags:
   - docker
  script:
   - pylint beiran

checks:lint-plugins:
  stage: checks
  image: $CI_REGISTRY_IMAGE/checks:ci-${CI_PIPELINE_ID}
  tags:
   - docker
  script:
   - pylint plugins/beiran_package_docker/beiran_package_docker plugins/beiran_interface_k8s/beiran_interface_k8s

checks:mypy-beiran:
  stage: checks
  image: $CI_REGISTRY_IMAGE/checks:ci-${CI_PIPELINE_ID}
  tags:
   - docker
  script:
   - mypy --config-file mypy.ini beiran

checks:mypy-plugins:
  stage: checks
  image: $CI_REGISTRY_IMAGE/checks:ci-${CI_PIPELINE_ID}
  tags:
   - docker
  script:
   - mypy --config-file mypy.ini plugins/beiran_package_docker/beiran_package_docker plugins/beiran_interface_k8s/beiran_interface_k8s

checks:bandit-beiran:
  stage: checks
  image: $CI_REGISTRY_IMAGE/checks:ci-${CI_PIPELINE_ID}
  tags:
   - docker
  script:
   - bandit -r beiran
  allow_failure: true

checks:bandit-plugins:
  stage: checks
  image: $CI_REGISTRY_IMAGE/checks:ci-${CI_PIPELINE_ID}
  tags:
   - docker
  script:
   - bandit -r plugins/beiran_package_docker/beiran_package_docker plugins/beiran_interface_k8s
  allow_failure: true

start_test_services:
  stage: prepare
  tags:
   - docker
  script:
   - SRC_DIR=$(pwd)
   - mkdir -p /srv/builds/tmp/beirantest-${CI_PIPELINE_ID}
   - cd /srv/builds/tmp/beirantest-${CI_PIPELINE_ID}
   - cp $SRC_DIR/docker-compose.multipod.yml ./docker-compose.yml
   - sed -i "s#dkr\.beiran\.io\/beiran\/beiran:dev#${CI_REGISTRY_IMAGE}:ci-${CI_PIPELINE_ID}#g" docker-compose.yml
   - sed -i "s#dkr\.beiran\.io\/beiran\/beiran:checks#${CI_REGISTRY_IMAGE}/checks:ci-${CI_PIPELINE_ID}#g" docker-compose.yml
   - docker-compose up -d pod1 docker1 pod2 docker2 pod3 docker3 pod4 docker4
   - sleep 5
   # seed docker daemon (docker1 only)
   - docker-compose exec -T docker1 docker pull hello-world@sha256:0add3ace90ecb4adbf7777e9aacf18357296e799f81cabc9fde470971e499788
   - docker-compose exec -T docker1 docker tag hello-world@sha256:0add3ace90ecb4adbf7777e9aacf18357296e799f81cabc9fde470971e499788 hello-world:latest
   - docker-compose exec -T docker1 docker pull alpine@sha256:621c2f39f8133acb8e64023a94dbdf0d5ca81896102b9e57c0dc184cadaf5528
   - docker-compose exec -T docker1 docker tag alpine@sha256:621c2f39f8133acb8e64023a94dbdf0d5ca81896102b9e57c0dc184cadaf5528 alpine:latest
   - docker-compose exec -T docker1 docker images
   # starting beiran
   - docker-compose up -d beiran1 beiran2 beiran3 beiran4
   # allow beiran to start up (might not be enough)
   - sleep 5

test:unit:
  stage: test
  image:
    name: $CI_REGISTRY_IMAGE:ci-${CI_PIPELINE_ID}
    entrypoint: [""]

  tags:
   - docker
  script:
   - apk add yajl-dev
   - pytest

test:basic-behavior:
  stage: test
  tags:
   - docker
  script:
   - SRC_DIR=$(pwd)
   - cd /srv/builds/tmp/beirantest-${CI_PIPELINE_ID}
   - docker-compose ps
   - docker-compose logs beiran1
   - |
     echo "=========================================="
     echo "waiting until beirand is accessible"
     times=0
     until $(docker-compose exec -T beiran1 sh -c "wget -q -O /dev/null http://localhost:8888"); do
         printf '.'
         sleep 3
         times=$(( $times + 1 ))
         if [ $times -eq 10 ]; then
           2>&1 echo "timed out waiting for beirand"
           exit 1
         fi
     done
   - CONTAINER=$(docker-compose ps -q beiran1)
   - docker exec ${CONTAINER} beiran node info
   - docker exec ${CONTAINER} beiran node list
   - docker exec ${CONTAINER} beiran docker image list --all
   # TODO: Check if output has expected images
   - docker exec ${CONTAINER} beiran docker layer list --all
   # TODO: Check if output has expected layers!?

test:api:
  stage: test
  tags:
   - docker
  script:
   - SRC_DIR=$(pwd)
   - cd /srv/builds/tmp/beirantest-${CI_PIPELINE_ID}
   - docker-compose ps
   - docker-compose logs beiran1
   - |
     echo "=========================================="
     echo "waiting until beirand is accessible"
     times=0
     until $(docker-compose exec -T beiran1 sh -c "wget -q -O /dev/null http://localhost:8888"); do
         printf '.'
         sleep 3
         times=$(( $times + 1 ))
         if [ $times -eq 10 ]; then
           2>&1 echo "timed out waiting for beirand"
           exit 1
         fi
     done
   - CONTAINER=$(docker-compose ps -q beiran1)
   # we make beiran download an image from origin, and cache the layers in
   # beiran's own cache folder, so we can test it in api
   - docker exec ${CONTAINER} beiran docker image pull --wait hello-world@sha256:0add3ace90ecb4adbf7777e9aacf18357296e799f81cabc9fde470971e499788
   - docker-compose run --rm rest_api_test pyresttest --url http://pod1:8888 --test /opt/beirand.yaml

test:bats:
  stage: test
  tags:
   - docker
  script:
   - |
     SRC_DIR=$(pwd)
     mkdir ${SRC_DIR}/temp
     git clone https://github.com/sstephenson/bats.git
     bats/install.sh ${SRC_DIR}/temp
   - cd /srv/builds/tmp/beirantest-${CI_PIPELINE_ID}
   - docker-compose ps
   - docker-compose logs beiran1 beiran2 beiran3 beiran4
   - |
     echo "=========================================="
     echo "waiting until beirand is accessible"
     for node in beiran1 beiran2 beiran3 beiran4
     do
       times=0
       # docker-compose exec -T $node apt-get update
       # docker-compose exec -T $node apt-get install sqlite3 -y
       until $(docker-compose -f docker-compose.yml exec -T $node sh -c "wget -q -O /dev/null http://localhost:8888"); do
           printf '.'
           sleep 3
           times=$(( $times + 1 ))
           if [ $times -eq 10 ]; then
             2>&1 echo "timed out waiting for beirand"
             exit 1
           fi
       done
     done
   - |
     for node in beiran2 beiran3 beiran4
     do
       CONTAINER=$(docker-compose ps -q $node)
       docker cp ${SRC_DIR}/test/bats/beiran-cli-$node.bats ${CONTAINER}:/opt/beiran-cli.bats
       docker cp ${SRC_DIR}/test/bats/beiran-node-discovery.bats ${CONTAINER}:/opt/beiran-node-discovery.bats
       docker cp ${SRC_DIR}/temp ${CONTAINER}:/usr/local/
       echo "============== install bash for bat ================="
       docker exec ${CONTAINER} apk add bash
       echo "============== start bats test ($node) =============="
       docker exec ${CONTAINER} /usr/local/temp/bin/bats /opt/beiran-cli.bats
       docker exec ${CONTAINER} /usr/local/temp/bin/bats /opt/beiran-node-discovery.bats
     done

post-test:error-logs:
  stage: post-test
  tags:
   - docker
  script: |
   set -x
   cd /srv/builds/tmp/beirantest-${CI_PIPELINE_ID}
   BEIRAN_ERROR_COUNT=$(docker-compose logs | grep '[beiran] ERROR' || true | wc -l)
   if [ $BEIRAN_ERROR_COUNT -gt 0 ]; then
     echo "Errors in beiran logs, please check"
     exit 1
   fi

cleanup:services:
  stage: cleanup
  tags:
   - docker
  when: always
  script:
   - cd /srv/builds/tmp/beirantest-${CI_PIPELINE_ID}
   # dump logs for debugging
   - docker-compose logs
   - docker-compose kill || true
   - docker-compose rm -f -v
   - docker network rm beirantest-${CI_PIPELINE_ID}_test
   - cd /
   - rm -rf /srv/builds/tmp/beirantest-${CI_PIPELINE_ID}
   - docker run --rm dkr.rlab.io/system/thedocker:latest /usr/bin/reg rm $CI_REGISTRY_IMAGE:ci-${CI_PIPELINE_ID} -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" 
   - docker run --rm dkr.rlab.io/system/thedocker:latest /usr/bin/reg rm $CI_REGISTRY_IMAGE:${CI_COMMIT_REF_NAME} -u "gitlab-ci-token" -p "$CI_JOB_TOKEN"

# cleanup:
#   image: alpine:3.7
#   FIXME: volumes is not supported by gitlab-ci yet
#   volumes:
#    - /cache/beiran-build-vols:/cache/beiran-build-vols
#   commands:
#    - echo "Cleaning up docker storage"
#    - export B_DIR=/cache/beiran-build-vols/dockerd1-${CI_PIPELINE_ID} 
#    - if [ ! -d $B_DIR ]; then exit 0; fi
#    - du -ch -d1 $B_DIR
#    - rm -rf $B_DIR
#   when: always
