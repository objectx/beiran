stages:
 - pre_build
 - checks
 - start_test_services
 - test
 # - publish
 - cleanup

pre_build:daemon:
  stage: pre_build
  tags:
   - docker
  script:
   - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
   - docker pull $CI_REGISTRY_IMAGE:latest || true
   - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME || true
   - docker build --cache-from $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME,$CI_REGISTRY_IMAGE:latest -t $CI_REGISTRY_IMAGE:ci-${CI_PIPELINE_ID} -t $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME .
   - docker push $CI_REGISTRY_IMAGE:ci-${CI_PIPELINE_ID}
   - docker push $CI_REGISTRY_IMAGE:${CI_COMMIT_REF_NAME}

pre_build:checker:
  stage: pre_build
  tags:
   - docker
  script:
   - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
   - docker pull $CI_REGISTRY_IMAGE/checks:latest || true
   - docker build --cache-from $CI_REGISTRY_IMAGE/checks:latest -t $CI_REGISTRY_IMAGE/checks:ci-${CI_PIPELINE_ID} -t $CI_REGISTRY_IMAGE/checks:latest -f helpers/docker/checks/Dockerfile .
   - docker push $CI_REGISTRY_IMAGE/checks:ci-${CI_PIPELINE_ID}
   - docker push $CI_REGISTRY_IMAGE/checks:latest

checks:lint-daemon:
  stage: checks
  image: $CI_REGISTRY_IMAGE/checks:ci-${CI_PIPELINE_ID}
  tags:
   - docker
  script:
   - pylint beirand

checks:lint-client:
  stage: checks
  image: $CI_REGISTRY_IMAGE/checks:ci-${CI_PIPELINE_ID}
  tags:
   - docker
  script:
   - pylint beiran

checks:lint-plugins:
  stage: checks
  image: $CI_REGISTRY_IMAGE/checks:ci-${CI_PIPELINE_ID}
  tags:
   - docker
  script:
   - pylint plugins

checks:bandit-daemon:
  stage: checks
  image: $CI_REGISTRY_IMAGE/checks:ci-${CI_PIPELINE_ID}
  tags:
   - docker
  script:
   - bandit -r beirand
  allow_failure: true

checks:bandit-client:
  stage: checks
  image: $CI_REGISTRY_IMAGE/checks:ci-${CI_PIPELINE_ID}
  tags:
   - docker
  script:
   - bandit -r beiran
  allow_failure: true

checks:bandit-plugins:
  stage: checks
  image: $CI_REGISTRY_IMAGE/checks:ci-${CI_PIPELINE_ID}
  tags:
   - docker
  script:
   - bandit -r plugins
  allow_failure: true

start_test_services:
  stage: start_test_services
  tags:
   - docker
  script:
   - SRC_DIR=$(pwd)
   - mkdir -p /srv/builds/tmp/beirantest-${CI_PIPELINE_ID}
   - cd /srv/builds/tmp/beirantest-${CI_PIPELINE_ID}
   - cp $SRC_DIR/docker-compose.multipod.yml ./docker-compose.yml
   - sed -i "s#dkr\.beiran\.io\/beiran\/beiran:dev#${CI_REGISTRY_IMAGE}:ci-${CI_PIPELINE_ID}#g" docker-compose.yml
   - docker-compose up -d pod1 docker1 pod2 docker2 pod3 docker3
   - sleep 5
   # seed docker daemon (docker1 only)
   - docker-compose exec -T docker1 docker docker pull hello-world@sha256:0add3ace90ecb4adbf7777e9aacf18357296e799f81cabc9fde470971e499788
   - docker-compose exec -T docker1 docker pull alpine@sha256:621c2f39f8133acb8e64023a94dbdf0d5ca81896102b9e57c0dc184cadaf5528
   - docker-compose exec -T docker1 docker images
   # starting beiran
   - docker-compose up -d beiran1

test:unit:
  stage: test
  image: $CI_REGISTRY_IMAGE:ci-${CI_PIPELINE_ID}
  tags:
   - docker
  script:
   - pytest

test:api:
  stage: test
  tags:
   - docker
  script:
   - SRC_DIR=$(pwd)
   - cd /srv/builds/tmp/beirantest-${CI_PIPELINE_ID}
   - docker-compose ps
   - docker-compose logs beiran1
   - |
     echo "=========================================="
     echo "waiting until beirand is accessible"
     times=0
     until $(docker-compose exec -T beiran1 curl --output /dev/null --silent --fail http://localhost:8888); do
         printf '.'
         sleep 3
         times=$(( $times + 1 ))
         if [ $times -eq 10 ]; then
           2>&1 echo "timed out waiting for beirand"
           exit 1
         fi
     done
   - CONTAINER=$(docker-compose ps -q beiran1)
   - docker exec ${CONTAINER} pip install pyresttest==1.7.1
   # send test files to the container
   - cd ${SRC_DIR}
   - tar c $(find test/rest_api -name "*.yaml") | docker exec -i ${CONTAINER} tar xv -C /opt
   - docker exec ${CONTAINER} pyresttest --url http://localhost:8888 --test /opt/test/rest_api/beirand.yaml

cleanup:services:
  stage: cleanup
  tags:
   - docker
  when: always
  script:
   - cd /srv/builds/tmp/beirantest-${CI_PIPELINE_ID}
   # dump logs for debugging
   - docker-compose logs
   - docker-compose kill || true
   - docker-compose rm -f
   - cd /
   - rm -rf /srv/builds/tmp/beirantest-${CI_PIPELINE_ID}

# cleanup:
#   image: alpine:3.7
#   FIXME: volumes is not supported by gitlab-ci yet
#   volumes:
#    - /cache/beiran-build-vols:/cache/beiran-build-vols
#   commands:
#    - echo "Cleaning up docker storage"
#    - export B_DIR=/cache/beiran-build-vols/dockerd1-${CI_PIPELINE_ID} 
#    - if [ ! -d $B_DIR ]; then exit 0; fi
#    - du -ch -d1 $B_DIR
#    - rm -rf $B_DIR
#   when: always
