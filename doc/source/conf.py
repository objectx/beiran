# Beiran P2P Package Distribution Layer
# Copyright (C) 2019  Rainlab Inc & Creationline, Inc & Beiran Contributors
#
# Rainlab Inc. https://rainlab.co.jp
# Creationline, Inc. https://creationline.com">
# Beiran Contributors https://docs.beiran.io/contributors.html
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Beiran documentation build configuration file, created by
# sphinx-quickstart on Thu Jan 11 19:20:42 2018.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# import os
# import sys
# sys.path.insert(0, os.path.abspath('.'))


# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.

import os
from sphinx.ext import autodoc

extensions = ['sphinx.ext.autodoc',
              'sphinx.ext.doctest',
              'sphinx.ext.intersphinx',
              'sphinx.ext.todo',
              'sphinx.ext.coverage',
              'sphinx.ext.mathjax',
              'sphinx.ext.ifconfig',
              'sphinx.ext.viewcode',
              'sphinxcontrib.napoleon',
              'sphinx_click.ext',
             ]

# Add any paths that contain templates here, relative to this directory.
templates_path = ['../_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = 'Beiran'
copyright = '2019, Rainlab Inc. & Creationline,inc. & Beiran Contributors'
author = 'Rainlab inc. & Creationline,inc. & Beiran Contributors'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '0.1.0'
# The full version, including alpha/beta/rc tags.
release = '0.1.0'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = []

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True

# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'sphinx_rtd_theme'
html_theme_path = ['../_themes', ]

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
# html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# This is required for the alabaster theme
# refs: http://alabaster.readthedocs.io/en/latest/installation.html#sidebars
html_sidebars = {
    '**': [
        'relations.html',  # needs 'show_related': True theme option to display
        'searchbox.html',
    ]
}

# -- Options for HTMLHelp output ------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'Beirandoc'

# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'Beiran.tex', 'Beiran Documentation',
     'rlab', 'manual'),
]

# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'beiran', 'Beiran Documentation',
     [author], 1)
]

# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'Beiran', 'Beiran Documentation',
     author, 'Beiran', 'p2p package and image distribution layer.',
     'Miscellaneous'),
]

# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {'https://docs.python.org/': None}


# Napoleon settings
napoleon_google_docstring = True
napoleon_numpy_docstring = False
napoleon_include_init_with_doc = False
napoleon_include_private_with_doc = False
napoleon_include_special_with_doc = False
napoleon_use_admonition_for_examples = False
napoleon_use_admonition_for_notes = False
napoleon_use_admonition_for_references = False
napoleon_use_ivar = False
napoleon_use_param = True
napoleon_use_rtype = True
napoleon_use_keyword = True


html_theme_options = {
    'canonical_url': '',
    'analytics_id': '',
    'logo_only': False,
    'display_version': True,
    'prev_next_buttons_location': 'bottom',
    'style_external_links': False,
    # 'vcs_pageview_mode': '',
    # Toc options
    'collapse_navigation': False,
    'sticky_navigation': True,
    'navigation_depth': 4,
    'includehidden': True,

    'titles_only': False
}

gitlab_url = "https://gitlab.beiran.io"
repo_url = "{}/beiran/beiran".format(gitlab_url)
latest_release_version = os.popen('git describe --tags --match "v[0-9]*" --abbrev=0').read().strip()
commit_rev = os.popen('git rev-parse HEAD').read().strip()
git_branch = os.popen('git rev-parse --abbrev-ref HEAD').read().strip()
latest_binary_download = "https://beiran.io/downloads/beiran/latest"
docker_main_repo = "dkr.beiran.io/beiran/beiran"

epilog_replacements = {
    'gitlab_url'                  : gitlab_url,
    'repo_url'                    : repo_url,
    'email_list_subscribe_link'   : "subscribe+developers [at] lists.beiran.io",
    'beiran_git_latest_release'   : "{}.git@{}".format(repo_url, latest_release_version),
    'latest_release_version'      : latest_release_version,
    'commit_rev'                  : commit_rev,
    'latest_binary_download'      : latest_binary_download,
    'docker_main_repo'            : docker_main_repo,
}

epilog_links = {
    'authors'                     : "{}/blob/{}/AUTHORS".format(repo_url, commit_rev),
    'GitLab'                      : gitlab_url,
    'Issue Tracker'               : "{}/issues".format(repo_url),
    'Contributors Page on GitLab' : "{}/graphs/{}".format(repo_url, git_branch)
}

rst_epilog = "\n".join(['.. |{}| replace:: {}'.format(k, v) for k, v in epilog_replacements.items()]) \
    + "\n" \
    + "\n".join(['.. _{}: {}'.format(k, v) for k, v in epilog_links.items()]) \
    + "\n"

# https://stackoverflow.com/questions/7825263/including-docstring-in-sphinx-documentation
class SimpleDocumenter(autodoc.MethodDocumenter):
    """
    SimpleDocumenter includes only docstrings of specified object.

    Usage:
        .. autosimple:: mod.MyClass.my_method

    """
    objtype = "simple"

    # do not indent the content
    content_indent = u"    "

    # do not add a header to the docstring
    def add_directive_header(self, sig):
        pass

    def format_args(self):
        return None


# https://github.com/sphinx-doc/sphinx/issues/4054#issuecomment-329097229
def replace_docstring_variables(app, docname, source):
    result = source[0]
    for key in app.config.docstring_replacements:
        result = result.replace(key, app.config.docstring_replacements[key])
    source[0] = result

html_context = {
    "display_gitlab": True, # Integrate Gitlab
    "gitlab_host": "gitlab.beiran.io", # Username
    "gitlab_repo": "beiran/beiran", # Repo name
    "gitlab_version": git_branch, # Version
    "conf_py_path": "/doc/source/", # Path in the checkout to the docs root
}

docstring_replacements = {
    "{beiran_git_latest_release}": "https://gitlab.beiran.io/beiran/beiran.git@{}".format(latest_release_version),
    "{latest_binary_download}": latest_binary_download,
    "{docker_main_repo}": docker_main_repo,
}


# add SimpleDocumenter to available documenters.
def setup(app):
    app.add_autodocumenter(SimpleDocumenter)
    app.add_config_value('docstring_replacements', {}, True)
    app.connect('source-read', replace_docstring_variables)
