#!/bin/env python
import os
import click
import beiran
import sys

def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)

def exit_print(exit_code, *args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)
    sys.exit(exit_code)

unix_socket = "/var/run/beirand.sock"

# TODO: These key files should be generated by beirand, and chowned as `root:beiran`
#       so, only users in beiran group can access the socket and communicate with it
#       the daemon might allow other connections, but would not authorize them.
# client_key = "/etc/beiran/client.key"
# client_cert = "/etc/beiran/client.crt"

if 'BEIRAN_SOCK' in os.environ:
    unix_socket = os.environ['BEIRAN_SOCK']

VERSION = "0.0.1"

# beiran_client = beiran.Client(unix_socket, client_key = client_key, client_cert = client_cert)
beiran_client = beiran.Client(unix_socket)

@click.group()
def cli():
    pass

@click.command('version')
def version():
    print("CLI Version: " + VERSION)
    print("Library Version: " + beiran.VERSION)
    print("Server Socket: " + unix_socket)
    try:
        print("Server Version: " + beiran_client.GetServerVersion())
    except ConnectionRefusedError as e:
        exit_print(1, "Cannot connect to server")

cli.add_command(version)

@click.group()
def image():
    pass
cli.add_command(image)

@click.command('pull')
@click.argument('imagename')
def image_pull(imagename):
    """Pull a container image from cluster or repository"""
    click.echo('Pulling image %s!' % imagename)
image.add_command(image_pull)

@click.command('list')
def image_list():
    """List container images across the cluster"""
    click.echo('Listing images!')
image.add_command(image_list)

if __name__ == '__main__':
    cli()

