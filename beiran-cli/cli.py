#!/bin/env python
"""command line client for managing beiran daemon"""

import os
import sys
import click
import beiran
from beiran.util import exit_print
from beiran.version import get_version

VERSION = get_version('short', 'cli')

sys.stdout = beiran.util.Unbuffered(sys.stdout)


@click.group()
@click.pass_context
def main(ctx):
    """main method for click(lib) entry, injects the singleton
    instance of Cli class into click context"""
    ctx.obj = Cli.singleton


class Cli():
    """beiran cli methods for click(lib)"""
    ctx = None
    singleton = None

    def __init__(self):
        Cli.singleton = self
        self.unix_socket = "/var/run/beirand.sock"
        if 'BEIRAN_SOCK' in os.environ:
            unix_socket = os.environ['BEIRAN_SOCK']

        # TODO: These key files should be generated by beirand, and chowned as `root:beiran`
        #       so, only users in beiran group can access the socket and communicate with it
        #       the daemon might allow other connections, but would not authorize them.
        # self.client_key = "/etc/beiran/client.key"
        # self.client_cert = "/etc/beiran/client.crt"

        # self.beiran_client = beiran.Client(unix_socket,
        #     client_key = client_key, client_cert = client_cert)
        self.beiran_client = beiran.Client(unix_socket)

    @click.command('version')
    @click.pass_obj
    def version(self):
        """prints the versions of each component"""
        print("CLI Version: " + VERSION)
        print("Library Version: " + get_version('short', 'library'))
        print("Server Socket: " + self.unix_socket)
        try:
            print("Daemon Version: " + self.beiran_client.get_server_version())
        except (ConnectionRefusedError, FileNotFoundError):
            exit_print(1, "Cannot connect to server")

    main.add_command(version)

    @click.group()
    @click.pass_obj
    def image(self):
        """group command for image management"""
        pass

    main.add_command(image)

    @click.command('pull')
    @click.argument('imagename')
    @click.pass_obj
    def image_pull(self, imagename):
        """Pull a container image from cluster or repository"""
        click.echo('Pulling image %s!' % imagename)

    image.add_command(image_pull)

    @click.command('list')
    @click.pass_obj
    def image_list(self):
        """List container images across the cluster"""
        click.echo('Listing images!')

    image.add_command(image_list)


if __name__ == '__main__':
    Cli()
    main(None)
